{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PowerDNS Operator","text":"<p>PowerDNS Operator is a Kubernetes operator that provides declarative DNS management using Custom Resource Definitions (CRDs). It enables you to manage PowerDNS zones and records directly from Kubernetes manifests.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Declarative DNS Management: Manage zones and records through Kubernetes CRDs</li> <li>Flexible Deployment: PowerDNS can be deployed inside or outside the Kubernetes cluster</li> <li>Namespace Isolation: Support for both cluster-wide and namespace-scoped resources</li> <li>RBAC Integration: Fine-grained access control with Kubernetes RBAC</li> <li>GitOps Ready: Perfect for GitOps workflows with ArgoCD, Flux, or similar tools</li> <li>Metrics &amp; Monitoring: Built-in Prometheus metrics and observability</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install the operator\nkubectl apply -f https://github.com/powerdns-operator/PowerDNS-Operator/releases/latest/download/bundle.yaml\n\n# Create a zone\nkubectl apply -f - &lt;&lt;EOF\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: example.com\nspec:\n  kind: Native\n  nameservers:\n    - ns1.example.com\n    - ns2.example.com\nEOF\n</code></pre>"},{"location":"#supported-resources","title":"Supported Resources","text":"Resource Scope Description <code>ClusterZone</code> Cluster-wide DNS zones available across all namespaces <code>Zone</code> Namespace-scoped DNS zones isolated within a namespace <code>ClusterRRset</code> Cluster-wide DNS records in cluster zones <code>RRset</code> Namespace-scoped DNS records in namespace zones"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes: 1.29+</li> <li>PowerDNS: 4.7+ with API enabled</li> <li>API Access: PowerDNS API must be accessible from the Kubernetes cluster</li> </ul> <p>API Compatibility</p> <p>This operator uses the official PowerDNS API and cannot be used with PowerDNS-Admin's custom API. Both can coexist but should not manage the same resources.</p>"},{"location":"guides/clusterrrsets/","title":"ClusterRRset deployment","text":""},{"location":"guides/clusterrrsets/#specification","title":"Specification","text":"<p>The <code>ClusterRRset</code> specification contains the following fields:</p> Field Type Required Description type string Y Type of the record (e.g. \"A\", \"PTR\", \"MX\") name string Y Name of the record ttl uint32 Y DNS TTL of the records, in seconds records []string Y All records in this Resource Record Set comment string N Comment on RRSet zoneRef ZoneRef Y ZoneRef reference the zone the ClusterRRSet depends on <p>The <code>ZoneRef</code> specification contains the following fields:</p> Field Type Required Description name string Y Name of the <code>ClusterZone</code>/<code>Zone</code> kind string Y Kind of zone (Zone/ClusterZone)"},{"location":"guides/clusterrrsets/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: test.helloworld.com\nspec:\n  comment: nothing to tell\n  type: A\n  name: test\n  ttl: 300\n  records:\n    - 1.1.1.1\n    - 2.2.2.2\n  zoneRef:\n    name: helloworld.com\n    kind: \"ClusterZone\"\n</code></pre> <p>Note: The name can be canonical or not. If not, the name of the <code>ClusterZone</code>/<code>Zone</code> will be appended</p>"},{"location":"guides/clusterrrsets/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for ClusterRRset resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply clusterrrset.yaml\n    K-&gt;&gt;C: ClusterRRset Created Event\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com/records\n        P--&gt;&gt;C: RRset Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update ClusterRRset\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;K: Get Referenced Zone (ClusterZone)\n\n        alt Zone not found\n            C-&gt;&gt;K: Set Pending Status\n            C-&gt;&gt;K: Set Zone Not Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Requeue after 2s\n        else Zone found\n            C-&gt;&gt;C: Check Zone Status\n\n            alt Zone in Failed Status\n                C-&gt;&gt;K: Set Failed Status\n                C-&gt;&gt;K: Set Zone Unavailable Condition\n                C-&gt;&gt;M: Update Metrics\n                Note over C: Reconciliation Failed\n            else Zone Available\n                C-&gt;&gt;C: Check for duplicate RRsets\n\n                alt Duplicate RRset found\n                    C-&gt;&gt;K: Set Failed Status\n                    C-&gt;&gt;K: Set Duplicated Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Failed\n                else No duplicates\n                    C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com/records\n\n                    alt RRset doesn't exist in PowerDNS\n                        C-&gt;&gt;P: POST /api/v1/servers/localhost/zones/example.com/records\n                        Note over P: Create RRset with records\n                        P--&gt;&gt;C: RRset Created Successfully\n                    else RRset exists in PowerDNS\n                        C-&gt;&gt;C: Compare desired vs actual state\n                        alt Differences found\n                            C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com/records\n                            P--&gt;&gt;C: RRset Updated Successfully\n                        end\n                    end\n\n                    C-&gt;&gt;K: Set Owner Reference\n                    C-&gt;&gt;K: Update ClusterRRset Status\n                    C-&gt;&gt;K: Set Available Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Succeeded\n                end\n            end\n        end\n    end\n\n    K--&gt;&gt;U: ClusterRRset Status Updated</code></pre>"},{"location":"guides/clusterzones/","title":"ClusterZone deployment","text":""},{"location":"guides/clusterzones/#specification","title":"Specification","text":"<p>The <code>ClusterZone</code> specification contains the following fields:</p> Field Type Required Description kind string Y Kind of the zone, one of \"Native\", \"Master\", \"Slave\", \"Producer\", \"Consumer\" nameservers []string Y List of the nameservers of the zone catalog string N The catalog this zone is a member of soa_edit_api string N The SOA-EDIT-API metadata item, one of \"DEFAULT\", \"INCREASE\", \"EPOCH\", defaults to \"DEFAULT\""},{"location":"guides/clusterzones/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: helloworld.com\nspec:\n  nameservers:\n    - ns1.helloworld.com\n    - ns2.helloworld.com\n  kind: Master\n  catalog: catalog.helloworld\n  soa_edit_api: EPOCH\n</code></pre>"},{"location":"guides/clusterzones/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for ClusterZone resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply clusterzone.yaml\n    K-&gt;&gt;C: ClusterZone Created Event\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com\n        P--&gt;&gt;C: Zone Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update ClusterZone\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;C: Check for duplicate zones\n\n        alt Duplicate zone found\n            C-&gt;&gt;K: Set Failed Status\n            C-&gt;&gt;K: Set Duplicated Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Failed\n        else No duplicates\n            C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com\n\n            alt Zone doesn't exist in PowerDNS\n                C-&gt;&gt;P: POST /api/v1/servers/localhost/zones\n                Note over P: Create Zone with NS records\n                P--&gt;&gt;C: Zone Created Successfully\n            else Zone exists in PowerDNS\n                C-&gt;&gt;C: Compare desired vs actual state\n                alt Differences found\n                    C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com\n                    P--&gt;&gt;C: Zone Updated Successfully\n                end\n            end\n\n            C-&gt;&gt;K: Update ClusterZone Status\n            C-&gt;&gt;K: Set Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Succeeded\n        end\n    end\n\n    K--&gt;&gt;U: ClusterZone Status Updated</code></pre>"},{"location":"guides/metrics/","title":"Metrics","text":"<p>The PowerDNS Operator exposes Prometheus metrics for monitoring and observability.</p>"},{"location":"guides/metrics/#available-metrics","title":"Available Metrics","text":"Metric Type Description Labels <code>clusterzones_status</code> gauge ClusterZone status <code>name</code>, <code>status</code> <code>zones_status</code> gauge Zone status <code>name</code>, <code>namespace</code>, <code>status</code> <code>clusterrrsets_status</code> gauge ClusterRRset status <code>fqdn</code>, <code>name</code>, <code>status</code>, <code>type</code> <code>rrsets_status</code> gauge RRset status <code>fqdn</code>, <code>name</code>, <code>namespace</code>, <code>status</code>, <code>type</code>"},{"location":"guides/metrics/#status-values","title":"Status Values","text":"<ul> <li><code>Succeeded</code>: Resource successfully reconciled</li> <li><code>Failed</code>: Resource reconciliation failed</li> <li><code>Pending</code>: Resource waiting for dependencies</li> </ul>"},{"location":"guides/metrics/#example-metrics","title":"Example Metrics","text":"<p>Based on the example configuration:</p> <pre><code># Cluster zones\nclusterzones_status{name=\"example.org\",status=\"Succeeded\"} 1\n\n# Cluster records\nclusterrrsets_status{fqdn=\"example.org.\",name=\"mx.example.org\",status=\"Succeeded\",type=\"MX\"} 1\nclusterrrsets_status{fqdn=\"example.org.\",name=\"soa.example.org\",status=\"Succeeded\",type=\"SOA\"} 1\nclusterrrsets_status{fqdn=\"ns1.example.org.\",name=\"ns1.example.org\",status=\"Succeeded\",type=\"A\"} 1\nclusterrrsets_status{fqdn=\"ns2.example.org.\",name=\"ns2.example.org\",status=\"Succeeded\",type=\"A\"} 1\n\n# Namespace zones\nzones_status{name=\"myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\"} 1\n\n# Namespace records\nrrsets_status{fqdn=\"myapp1.example.org.\",name=\"soa.myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\",type=\"SOA\"} 1\nrrsets_status{fqdn=\"front.myapp1.example.org.\",name=\"front.myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\",type=\"A\"} 1\n</code></pre>"},{"location":"guides/metrics/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"guides/metrics/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code>scrape_configs:\n  - job_name: 'powerdns-operator'\n    static_configs:\n      - targets: ['powerdns-operator-controller-manager:8080']\n    metrics_path: /metrics\n</code></pre>"},{"location":"guides/metrics/#grafana-dashboard","title":"Grafana Dashboard","text":"<p>Create alerts for: - Resources in <code>Failed</code> status - Resources stuck in <code>Pending</code> status - High failure rates</p>"},{"location":"guides/metrics/#example-queries","title":"Example Queries","text":"<pre><code># Failed resources count\nsum(clusterzones_status{status=\"Failed\"}) + sum(zones_status{status=\"Failed\"})\n\n# Success rate\nsum(clusterzones_status{status=\"Succeeded\"}) / sum(clusterzones_status)\n</code></pre>"},{"location":"guides/rrsets/","title":"RRset deployment","text":""},{"location":"guides/rrsets/#specification","title":"Specification","text":"<p>The <code>RRset</code> specification contains the following fields:</p> Field Type Required Description type string Y Type of the record (e.g. \"A\", \"PTR\", \"MX\") name string Y Name of the record ttl uint32 Y DNS TTL of the records, in seconds records []string Y All records in this Resource Record Set comment string N Comment on RRSet zoneRef ZoneRef Y ZoneRef reference the zone the RRSet depends on <p>The <code>ZoneRef</code> specification contains the following fields:</p> Field Type Required Description name string Y Name of the <code>ClusterZone</code>/<code>Zone</code> kind string Y Kind of zone (Zone/ClusterZone)"},{"location":"guides/rrsets/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: test.helloworld.com\n  namespace: default\nspec:\n  comment: nothing to tell\n  type: A\n  name: test\n  ttl: 300\n  records:\n    - 1.1.1.1\n    - 2.2.2.2\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre> <p>Note: The name can be canonical or not. If not, the name of the <code>ClusterZone</code>/<code>Zone</code> will be appended</p>"},{"location":"guides/rrsets/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for RRset resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply rrset.yaml -n default\n    K-&gt;&gt;C: RRset Created Event (namespace-scoped)\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com/records\n        P--&gt;&gt;C: RRset Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update RRset\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;K: Get Referenced Zone (Zone/ClusterZone)\n\n        alt Zone not found\n            C-&gt;&gt;K: Set Pending Status\n            C-&gt;&gt;K: Set Zone Not Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Requeue after 2s\n        else Zone found\n            C-&gt;&gt;C: Check Zone Status\n\n            alt Zone in Failed Status\n                C-&gt;&gt;K: Set Failed Status\n                C-&gt;&gt;K: Set Zone Unavailable Condition\n                C-&gt;&gt;M: Update Metrics\n                Note over C: Reconciliation Failed\n            else Zone Available\n                C-&gt;&gt;C: Check for duplicate RRsets (namespace-aware)\n\n                alt Duplicate RRset found\n                    C-&gt;&gt;K: Set Failed Status\n                    C-&gt;&gt;K: Set Duplicated Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Failed\n                else No duplicates\n                    C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com/records\n\n                    alt RRset doesn't exist in PowerDNS\n                        C-&gt;&gt;P: POST /api/v1/servers/localhost/zones/example.com/records\n                        Note over P: Create RRset with records\n                        P--&gt;&gt;C: RRset Created Successfully\n                    else RRset exists in PowerDNS\n                        C-&gt;&gt;C: Compare desired vs actual state\n                        alt Differences found\n                            C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com/records\n                            P--&gt;&gt;C: RRset Updated Successfully\n                        end\n                    end\n\n                    C-&gt;&gt;K: Set Owner Reference\n                    C-&gt;&gt;K: Update RRset Status\n                    C-&gt;&gt;K: Set Available Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Succeeded\n                end\n            end\n        end\n    end\n\n    K--&gt;&gt;U: RRset Status Updated</code></pre>"},{"location":"guides/warnings/","title":"Common Issues and Solutions","text":""},{"location":"guides/warnings/#record-format-requirements","title":"Record Format Requirements","text":""},{"location":"guides/warnings/#canonical-names","title":"Canonical Names","text":"<p>Some record types require canonical format (ending with a dot <code>.</code>):</p>"},{"location":"guides/warnings/#cname-records","title":"CNAME Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: test4.helloworld.com\nspec:\n  type: CNAME\n  name: test4\n  ttl: 300\n  records:\n    - test1.helloworld.com.\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#ptr-records","title":"PTR Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: 1.1.168.192.in-addr.arpa.helloworld.com\nspec:\n  type: PTR\n  name: \"1\"\n  ttl: 300\n  records:\n    - mailserver.helloworld.com.\n  zoneRef:\n    name: 1.168.192.in-addr.arpa\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#mx-records","title":"MX Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: mx.helloworld.com\nspec:\n  type: MX\n  name: \"helloworld.com.\"\n  ttl: 300\n  records:\n    - \"10 mailserver1.helloworld.com.\"\n    - \"20 mailserver2.helloworld.com.\"\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#srv-records","title":"SRV Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: database.srv.helloworld.com\nspec:\n  type: SRV\n  name: \"_database._tcp.myapp\"\n  ttl: 300\n  records:\n    - 1 50 25565 test2.helloworld.com.\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#txt-records","title":"TXT Records","text":"<p>TXT records must be properly quoted. If you see this error:</p> <pre><code>Parsing record content: Data field in DNS should start with quote (\") at position 0\n</code></pre> <p>Solution: Ensure TXT records start and end with escaped quotes:</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: txt.helloworld.com\nspec:\n  type: TXT\n  name: \"helloworld.com.\"\n  ttl: 300\n  records:\n    - \"\\\"Welcome to the helloworld.com domain\\\"\"\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"guides/warnings/#zone-conflicts","title":"Zone Conflicts","text":"<ul> <li>Error: Zone shows \"Failed\" status with \"Already existing Zone\" message</li> <li>Cause: Multiple zones with the same FQDN</li> <li>Solution: Remove duplicate zones or use different names</li> </ul>"},{"location":"guides/warnings/#missing-dependencies","title":"Missing Dependencies","text":"<ul> <li>Error: RRset shows \"Pending\" status</li> <li>Cause: Referenced zone does not exist or is unhealthy</li> <li>Solution: Create the zone first or fix zone issues</li> </ul>"},{"location":"guides/warnings/#api-connectivity","title":"API Connectivity","text":"<ul> <li>Error: Resources stuck in \"Pending\" status</li> <li>Cause: PowerDNS API unreachable or authentication failed</li> <li>Solution: Check API URL, key, and network connectivity</li> </ul>"},{"location":"guides/warnings/#best-practices","title":"Best Practices","text":"<ol> <li>Use canonical names for CNAME, PTR, MX, and SRV records</li> <li>Quote TXT records properly with escaped quotes</li> <li>Create zones before records to avoid dependency issues</li> <li>Check for duplicates before creating resources</li> <li>Monitor metrics for failed reconciliations</li> </ol>"},{"location":"guides/zones/","title":"Zone deployment","text":""},{"location":"guides/zones/#specification","title":"Specification","text":"<p>The <code>Zone</code> specification contains the following fields:</p> Field Type Required Description kind string Y Kind of the zone, one of \"Native\", \"Master\", \"Slave\", \"Producer\", \"Consumer\" nameservers []string Y List of the nameservers of the zone catalog string N The catalog this zone is a member of soa_edit_api string N The SOA-EDIT-API metadata item, one of \"DEFAULT\", \"INCREASE\", \"EPOCH\", defaults to \"DEFAULT\""},{"location":"guides/zones/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: helloworld.com\n  namespace: default\nspec:\n  nameservers:\n    - ns1.helloworld.com\n    - ns2.helloworld.com\n  kind: Master\n  catalog: catalog.helloworld\n  soa_edit_api: EPOCH\n</code></pre>"},{"location":"guides/zones/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for Zone resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply zone.yaml -n default\n    K-&gt;&gt;C: Zone Created Event (namespace-scoped)\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com\n        P--&gt;&gt;C: Zone Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update Zone\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;C: Check for duplicate zones (namespace-aware)\n\n        alt Duplicate zone found\n            C-&gt;&gt;K: Set Failed Status\n            C-&gt;&gt;K: Set Duplicated Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Failed\n        else No duplicates\n            C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com\n\n            alt Zone doesn't exist in PowerDNS\n                C-&gt;&gt;P: POST /api/v1/servers/localhost/zones\n                Note over P: Create Zone with NS records\n                P--&gt;&gt;C: Zone Created Successfully\n            else Zone exists in PowerDNS\n                C-&gt;&gt;C: Compare desired vs actual state\n                alt Differences found\n                    C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com\n                    P--&gt;&gt;C: Zone Updated Successfully\n                end\n            end\n\n            C-&gt;&gt;K: Update Zone Status\n            C-&gt;&gt;K: Set Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Succeeded\n        end\n    end\n\n    K--&gt;&gt;U: Zone Status Updated</code></pre>"},{"location":"introduction/faq/","title":"FAQ","text":""},{"location":"introduction/faq/#general-questions","title":"General Questions","text":""},{"location":"introduction/faq/#can-i-use-powerdns-admin-and-powerdns-operator-together","title":"Can I use PowerDNS-Admin and PowerDNS Operator together?","text":"<p>Yes, but with limitations. The operator only supports the official PowerDNS API, while PowerDNS-Admin implements its own custom API. Both can coexist, but avoid managing the same resources with both tools to prevent conflicts.</p>"},{"location":"introduction/faq/#can-i-manage-multiple-powerdns-servers-with-a-single-operator","title":"Can I manage multiple PowerDNS servers with a single operator?","text":"<p>No. The operator is designed to manage a single PowerDNS server. For multiple servers, deploy separate operator instances in different clusters.</p>"},{"location":"introduction/faq/#does-the-operator-check-for-configuration-drift","title":"Does the operator check for configuration drift?","text":"<p>No. The operator only reconciles on Kubernetes events (create, update, delete). It does not periodically check for drift between Kubernetes resources and PowerDNS. This feature may be added in future versions.</p>"},{"location":"introduction/faq/#technical-questions","title":"Technical Questions","text":""},{"location":"introduction/faq/#what-happens-if-i-delete-a-zone-that-has-records","title":"What happens if I delete a zone that has records?","text":"<p>The operator will delete the zone and all its records from PowerDNS. Records in Kubernetes will be marked as failed since their referenced zone no longer exists.</p>"},{"location":"introduction/faq/#can-i-use-the-operator-with-powerdns-recursor","title":"Can I use the operator with PowerDNS Recursor?","text":"<p>No. The operator only works with PowerDNS Authoritative Server. The Recursor does not have the same API for zone and record management.</p>"},{"location":"introduction/faq/#how-do-i-handle-dns-propagation-delays","title":"How do I handle DNS propagation delays?","text":"<p>The operator manages the PowerDNS server configuration but does not control DNS propagation. Consider TTL values and upstream DNS server configurations for propagation timing.</p>"},{"location":"introduction/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"introduction/faq/#my-zone-shows-failed-status","title":"My zone shows \"Failed\" status","text":"<p>Check for: - Duplicate zones with the same FQDN - PowerDNS API connectivity issues - Invalid zone configuration (nameservers, etc.)</p>"},{"location":"introduction/faq/#my-records-are-not-being-created","title":"My records are not being created","text":"<p>Check for: - Referenced zone exists and is healthy - No duplicate records with the same name and type - PowerDNS API permissions - Record format (especially for CNAME, MX, SRV records)</p>"},{"location":"introduction/getting-started/","title":"Getting Started","text":""},{"location":"introduction/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes: 1.29+</li> <li>PowerDNS: 4.7+ with API enabled</li> <li>API Access: PowerDNS API must be accessible from the Kubernetes cluster</li> </ul>"},{"location":"introduction/getting-started/#installation","title":"Installation","text":""},{"location":"introduction/getting-started/#option-1-direct-installation-recommended","title":"Option 1: Direct Installation (Recommended)","text":"<pre><code># Create namespace\nkubectl create namespace powerdns-operator-system\n\n# Create PowerDNS configuration secret\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: powerdns-operator-manager\n  namespace: powerdns-operator-system\ntype: Opaque\nstringData:\n  PDNS_API_URL: https://your-powerdns-server:8081\n  PDNS_API_KEY: your-api-key\n  PDNS_API_VHOST: localhost\nEOF\n\n# Install the operator\nkubectl apply -f https://github.com/powerdns-operator/PowerDNS-Operator/releases/latest/download/bundle.yaml\n</code></pre>"},{"location":"introduction/getting-started/#option-2-helm-installation","title":"Option 2: Helm Installation","text":"<pre><code># Add the Helm repository\nhelm repo add powerdns-operator https://powerdns-operator.github.io/PowerDNS-Operator-helm-chart\nhelm repo update\n\n# Install the operator\nhelm install powerdns-operator powerdns-operator/powerdns-operator \\\n  --namespace powerdns-operator-system \\\n  --create-namespace\n</code></pre>"},{"location":"introduction/getting-started/#configuration","title":"Configuration","text":""},{"location":"introduction/getting-started/#environment-variables","title":"Environment Variables","text":"Variable Description Required Default <code>PDNS_API_URL</code> PowerDNS API server URL \u2705 Yes None <code>PDNS_API_KEY</code> PowerDNS API authentication key \u2705 Yes None <code>PDNS_API_VHOST</code> PowerDNS virtual host \u274c No <code>localhost</code> <code>PDNS_API_TIMEOUT</code> API request timeout in seconds \u274c No <code>10</code>"},{"location":"introduction/getting-started/#verification","title":"Verification","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream | Environment Variable | Description | Default Value | Required | |---------------------|-------------|---------------|----------| | <code>PDNS_API_URL</code> | The URL of the PowerDNS API server | None | Yes | | <code>PDNS_API_KEY</code> | The API key for authenticating with PowerDNS | None | Yes | | <code>PDNS_API_VHOST</code> | The virtual host name for the PowerDNS API | <code>localhost</code> | No | | <code>PDNS_API_TIMEOUT</code> | Timeout in seconds for PowerDNS API requests | <code>10</code> | No |</p>"},{"location":"introduction/getting-started/#important-the-operator-will-fail-to-start-if-any-of-the-required-environment-variables-is-not-provided","title":"&gt; Important: The operator will fail to start if any of the required environment variables is not provided.","text":"<pre><code># Check operator status\nkubectl get pods -n powerdns-operator-system\n\n# Verify CRDs are installed\nkubectl get crd | grep dns.cav.enablers.ob\n\n# Test with a simple zone\nkubectl apply -f - &lt;&lt;EOF\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: test.example.com\nspec:\n  kind: Native\n  nameservers:\n    - ns1.test.example.com\n    - ns2.test.example.com\nEOF\n</code></pre>"},{"location":"introduction/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Resource Guides - Learn about each resource type</li> <li>Examples - See practical examples</li> <li>RBAC Setup - Configure access control <p>Stashed changes</p> </li> </ul>"},{"location":"introduction/overview/","title":"Overview","text":""},{"location":"introduction/overview/#architecture","title":"Architecture","text":"<p>The PowerDNS Operator extends Kubernetes with Custom Resource Definitions (CRDs) to manage PowerDNS zones and records declaratively. The operator watches for changes to these resources and reconciles them with the PowerDNS API.</p>"},{"location":"introduction/overview/#resource-model","title":"Resource Model","text":"<p>The operator supports four main resource types:</p>"},{"location":"introduction/overview/#1-clusterzone-cluster-wide","title":"1. ClusterZone (Cluster-wide)","text":"<p>Platform teams create cluster-wide zones that are available across all namespaces.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: example.org\nspec:\n  nameservers:\n    - ns1.example.org\n    - ns2.example.org\n  kind: Native\n</code></pre>"},{"location":"introduction/overview/#2-clusterrrset-cluster-wide","title":"2. ClusterRRset (Cluster-wide)","text":"<p>Platform teams create cluster-wide records for infrastructure services.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: soa.example.org\nspec:\n  name: example.org.\n  records:\n  - ns1.example.org. admin.example.org. 1 10800 3600 604800 3600\n  ttl: 3600\n  type: SOA\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: mx.example.org\nspec:\n  type: MX\n  name: \"example.org.\"\n  ttl: 300\n  records:\n    - \"10 mx1.example.org.\"\n    - \"20 mx2.example.org.\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: ns1.example.org\nspec:\n  type: A\n  name: ns1\n  ttl: 300\n  records:\n    - \"10.25.32.1\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: ns2.example.org\nspec:\n  type: A\n  name: ns2\n  ttl: 300\n  records:\n    - \"10.25.32.2\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n</code></pre>"},{"location":"introduction/overview/#3-zone-namespace-scoped","title":"3. Zone (Namespace-scoped)","text":"<p>Application teams create namespace-scoped zones for their applications.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: myapp1.example.org\n  namespace: myapp1\nspec:\n  nameservers:\n    - ns1.example.org\n    - ns2.example.org\n  kind: Native\n</code></pre>"},{"location":"introduction/overview/#4-rrset-namespace-scoped","title":"4. RRset (Namespace-scoped)","text":"<p>Application teams create records for their application services.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: soa.myapp1.example.org\n  namespace: myapp1\nspec:\n  name: myapp1.example.org.\n  records:\n  - ns1.example.org. admin.example.org. 1 10800 3600 604800 3600\n  ttl: 3600\n  type: SOA\n  zoneRef:\n    name: myapp1.example.org\n    kind: Zone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: front.myapp1.example.org\n  namespace: myapp1\nspec:\n  type: A\n  name: front\n  ttl: 300\n  records:\n    - \"1.2.3.4\"\n  zoneRef:\n    name: myapp1.example.org\n    kind: Zone\n</code></pre>"},{"location":"introduction/overview/#reconciliation-process","title":"Reconciliation Process","text":""},{"location":"introduction/overview/#zone-reconciliation","title":"Zone Reconciliation","text":"<ol> <li>Duplicate Check: Verify no other zone exists with the same FQDN</li> <li>API Operation: Create or modify zone via PowerDNS API</li> <li>NS Records: Create or modify nameserver entries</li> <li>Status Update: Update resource status and metrics</li> </ol>"},{"location":"introduction/overview/#record-reconciliation","title":"Record Reconciliation","text":"<ol> <li>Zone Dependency: Verify the referenced zone exists and is healthy</li> <li>Duplicate Check: Verify no duplicate records exist</li> <li>API Operation: Create or modify record via PowerDNS API</li> <li>Owner Reference: Set ownership relationship</li> <li>Status Update: Update resource status and metrics</li> </ol>"},{"location":"introduction/overview/#roles-and-responsibilities","title":"Roles and Responsibilities","text":"Role Responsibilities Resources Cluster Operator Configure PowerDNS instance and operator Infrastructure setup Platform Team Define architecture and permissions ClusterZone, Zone, ClusterRRset Application Team Manage application DNS records RRset, Zone (namespace-scoped) <p>RBAC Integration</p> <p>Each role maps to Kubernetes RBAC roles. The operator provides granular permissions for different use cases.</p>"},{"location":"introduction/stability-support/","title":"Stability and Support","text":""},{"location":"introduction/stability-support/#version-compatibility","title":"Version Compatibility","text":"Component Supported Versions PowerDNS Authoritative 4.7, 4.8, 4.9 Kubernetes 1.31, 1.32, 1.33 Go (for development) 1.24+"},{"location":"introduction/stability-support/#breaking-changes","title":"Breaking Changes","text":""},{"location":"introduction/stability-support/#v04x-breaking-changes","title":"v0.4.x Breaking Changes","text":"<p>Version 0.4.x introduced security and delegation improvements by splitting the previous <code>Zone</code> resource into two separate resources:</p>"},{"location":"introduction/stability-support/#changes-made","title":"Changes Made","text":"<ul> <li><code>Zone</code>: Changed from cluster-wide to namespace-scoped resource</li> <li><code>ClusterZone</code>: New cluster-wide resource for platform-level zones</li> <li><code>zoneRef.kind</code>: New mandatory field in RRset resources</li> <li>Status Conditions: Replaced <code>syncErrorDescription</code> with standard Kubernetes conditions</li> </ul>"},{"location":"introduction/stability-support/#migration-impact","title":"Migration Impact","text":"<ul> <li>Existing <code>Zone</code> resources need to be migrated to <code>ClusterZone</code> or updated with namespace</li> <li>All <code>RRset</code> resources need the new <code>zoneRef.kind</code> field</li> <li>Status field structure changed to use conditions</li> </ul> <p>Migration Required</p> <p>If upgrading from v0.3.x or earlier, review the migration guide and update your resources accordingly.</p>"},{"location":"introduction/stability-support/#support-policy","title":"Support Policy","text":"<ul> <li>Security Updates: Backported to supported versions</li> <li>Bug Fixes: Applied to current and previous minor versions</li> <li>New Features: Only in current major version</li> <li>Deprecation: Announced 2 versions in advance</li> </ul>"},{"location":"introduction/stability-support/#community-support","title":"Community Support","text":"<ul> <li>GitHub Issues: For bug reports and feature requests</li> <li>GitHub Discussions: For questions and community help</li> <li>Documentation: Comprehensive guides and examples available</li> </ul>"},{"location":"testing_environment/k3d/","title":"Testing Environment Setup","text":""},{"location":"testing_environment/k3d/#local-kubernetes-with-k3d","title":"Local Kubernetes with k3d","text":"<p>This guide shows how to set up a local testing environment using k3d. Other solutions like minikube, kind, or Talos can also be used.</p>"},{"location":"testing_environment/k3d/#prerequisites","title":"Prerequisites","text":"<ul> <li>k3d installed</li> <li>kubectl configured</li> <li>Docker running</li> </ul>"},{"location":"testing_environment/k3d/#setup-steps","title":"Setup Steps","text":""},{"location":"testing_environment/k3d/#1-create-local-registry-optional","title":"1. Create Local Registry (Optional)","text":"<pre><code>k3d registry create registry.localhost --port 5000\n</code></pre>"},{"location":"testing_environment/k3d/#2-create-kubernetes-cluster","title":"2. Create Kubernetes Cluster","text":"<p>Create a 3-node cluster with the following features: - Traefik ingress controller on port 18081 - CSI storage on <code>/mnt/k3d</code> for data persistence - Private registry access configured</p> <pre><code>cat &gt; ~/.k3d/k3d-cluster.yaml &lt;&lt;EOF\napiVersion: k3d.io/v1alpha5\nkind: Simple\nmetadata:\n  name: k3d\nservers: 1\nagents: 2\nvolumes:\n  - volume: \"/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt\"\n  - volume: /mnt/k3d:/var/lib/rancher/k3s/storage\n    nodeFilters:\n      - server:0\n      - agent:*\nports:\n  - port: 18081:80\n    nodeFilters:\n      - loadbalancer\nregistries:\n  use:\n    - k3d-registry.localhost:5000\nEOF\n\nk3d cluster create --config ~/.k3d/k3d-cluster.yaml\n</code></pre>"},{"location":"testing_environment/k3d/#3-verify-setup","title":"3. Verify Setup","text":"<pre><code># Check cluster status\nkubectl cluster-info\n\n# Check nodes\nkubectl get nodes\n\n# Check ingress controller\nkubectl get pods -n kube-system | grep traefik\n</code></pre>"},{"location":"testing_environment/k3d/#next-steps","title":"Next Steps","text":"<ul> <li>Install PowerDNS</li> <li>Deploy PowerDNS Operator</li> <li>Test with examples</li> </ul>"},{"location":"testing_environment/powerdns/","title":"PowerDNS Deployment","text":""},{"location":"testing_environment/powerdns/#deployment-options","title":"Deployment Options","text":""},{"location":"testing_environment/powerdns/#option-1-using-the-official-deployment","title":"Option 1: Using the Official Deployment","text":"<p>For a complete clustered PowerDNS setup, use the official deployment repository:</p> <p>PowerDNS Deployment</p> <p>This repository provides: - Complete PowerDNS cluster setup - MariaDB backend configuration - High availability configuration - Monitoring and logging setup</p>"},{"location":"testing_environment/powerdns/#option-2-manual-installation","title":"Option 2: Manual Installation","text":"<p>For testing or simple setups, you can install PowerDNS manually:</p> <pre><code># Install PowerDNS on Ubuntu/Debian\napt update &amp;&amp; apt install -y pdns-server pdns-backend-mysql\n\n# Configure PowerDNS\n# Edit /etc/powerdns/pdns.conf\n</code></pre>"},{"location":"testing_environment/powerdns/#option-3-docker-deployment","title":"Option 3: Docker Deployment","text":"<pre><code># Run PowerDNS with SQLite backend\ndocker run -d \\\n  --name powerdns \\\n  -p 53:53 -p 53:53/udp -p 8081:8081 \\\n  -e PDNS_api=yes \\\n  -e PDNS_api_key=your-secret-key \\\n  -e PDNS_webserver=yes \\\n  -e PDNS_webserver_address=0.0.0.0 \\\n  -e PDNS_webserver_allow_from=0.0.0.0/0 \\\n  pschiffe/pdns-mysql\n</code></pre>"},{"location":"testing_environment/powerdns/#configuration-requirements","title":"Configuration Requirements","text":"<p>Ensure your PowerDNS instance has: - API enabled: <code>api=yes</code> in configuration - Web server enabled: <code>webserver=yes</code> for API access - API key configured: Secure authentication key - Network access: Accessible from Kubernetes cluster</p>"},{"location":"testing_environment/powerdns/#testing-the-setup","title":"Testing the Setup","text":"<pre><code># Test API connectivity\ncurl -H \"X-API-Key: your-secret-key\" \\\n  http://powerdns-server:8081/api/v1/servers/localhost/zones\n\n# Test DNS resolution\ndig @powerdns-server example.com\n</code></pre>"}]}