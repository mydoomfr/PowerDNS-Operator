{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>PowerDNS Operator is a Kubernetes operator that manages PowerDNS service.</p> <p>With PowerDNS Operator you can manage zones, records and other PowerDNS resources directly from Kubernetes. It is designed to be a simple and easy-to-use solution to manage PowerDNS directly from Kubernetes through Custom Resources. The PowerDNS service can be located inside or outside of Kubernetes, it does not matter since the Operator relies on the PowerDNS API.</p> <p>Info</p> <p>This project use the official PowerDNS API and cannot be plugged to PowerDNS-Admin project which implement its own specific API on top PowerDNS's API. There is no issue if you want to use both projects together, but the operator can only relies on the official API and you may notice issues if you try to use PowerDNS-Admin to manage the same resources as the operator.</p>"},{"location":"#why-use-powerdns-operator","title":"Why use PowerDNS Operator?","text":"<p>We needed to offer DNS capabilities to users and considered relying on the PowerDNS-Admin project. However, we wanted a more flexible solution that could be natively integrated with our existing Kubernetes infrastructure. We were also looking for a solution that could be easily integrated with our GitOps workflow to automate the creation of DNS records as well as other resources such as Ingress, Services, etc.</p> <p>Another reason is that the PowerDNS-Admin project is not in good health and will probably be rewritten in the future. We wanted a solution that is more reliable and easily maintained.</p> <p>The PowerDNS Operator is a convenient way to offer self-service DNS capabilities to users, allowing them to create resources directly in the Kubernetes cluster. Additionally, you can use Backstage or any Internal Developer Platform and connect it to the Kubernetes API server that contains the PowerDNS Operator if you don't want to grant direct access to the Kubernetes cluster.</p>"},{"location":"guides/clusterrrsets/","title":"ClusterRRset deployment","text":""},{"location":"guides/clusterrrsets/#specification","title":"Specification","text":"<p>The specification of the <code>ClusterRRset</code> contains the following fields:</p> Field Type Required Description type string Y Type of the record (e.g. \"A\", \"PTR\", \"MX\") name string Y Name of the record ttl uint32 Y DNS TTL of the records, in seconds records []string Y All records in this Resource Record Set comment string N Comment on RRSet zoneRef ZoneRef Y ZoneRef reference the zone the ClusterRRSet depends on <p>The specification of the <code>ZoneRef</code> contains the following fields:</p> Field Type Required Description name string Y Name of the <code>ClusterZone</code>/<code>Zone</code> kind string Y Kind of zone (Zone/ClusterZone)"},{"location":"guides/clusterrrsets/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: test.helloworld.com\nspec:\n  comment: nothing to tell\n  type: A\n  name: test\n  ttl: 300\n  records:\n    - 1.1.1.1\n    - 2.2.2.2\n  zoneRef:\n    name: helloworld.com\n    kind: \"ClusterZone\"\n</code></pre> <p>Note: The name can be canonical or not. If not, the name of the <code>ClusterZone</code>/<code>Zone</code> will be appended</p>"},{"location":"guides/clusterzones/","title":"ClusterZone deployment","text":""},{"location":"guides/clusterzones/#specification","title":"Specification","text":"<p>The specification of the <code>ClusterZone</code> contains the following fields:</p> Field Type Required Description kind string Y Kind of the zone, one of \"Native\", \"Master\", \"Slave\", \"Producer\", \"Consumer\" nameservers []string Y List of the nameservers of the zone catalog string N The catalog this zone is a member of soa_edit_api string N The SOA-EDIT-API metadata item, one of \"DEFAULT\", \"INCREASE\", \"EPOCH\", defaults to \"DEFAULT\""},{"location":"guides/clusterzones/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: helloworld.com\nspec:\n  nameservers:\n    - ns1.helloworld.com\n    - ns2.helloworld.com\n  kind: Master\n  catalog: catalog.helloworld\n  soa_edit_api: EPOCH\n</code></pre>"},{"location":"guides/getting-started-advanced/","title":"Advanced Getting Started Guide","text":"<p>This comprehensive guide walks you through setting up PowerDNS Operator with real-world examples, best practices, and troubleshooting tips.</p>"},{"location":"guides/getting-started-advanced/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Kubernetes cluster (v1.29+)</li> <li>PowerDNS Authoritative Server (v4.7+) with API enabled</li> <li><code>kubectl</code> configured for your cluster</li> <li>Basic understanding of DNS concepts</li> </ul>"},{"location":"guides/getting-started-advanced/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Kubernetes Cluster\"\n        subgraph \"PowerDNS Operator Namespace\"\n            PO[PowerDNS Operator]\n            CM[Controller Manager]\n            WH[Webhook Server]\n            MS[Metrics Server]\n        end\n\n        subgraph \"Application Namespaces\"\n            NS1[Namespace: production]\n            NS2[Namespace: staging]\n            NS3[Namespace: development]\n        end\n\n        subgraph \"Custom Resources\"\n            CZ[ClusterZone]\n            CR[ClusterRRset]\n            Z1[Zone - production]\n            Z2[Zone - staging]\n            R1[RRset - production]\n            R2[RRset - staging]\n        end\n    end\n\n    subgraph \"External Infrastructure\"\n        PDNS[PowerDNS Server]\n        DNS[DNS Clients]\n    end\n\n    PO --&gt; CM\n    PO --&gt; WH\n    PO --&gt; MS\n\n    CM -.-&gt;|reconciles| CZ\n    CM -.-&gt;|reconciles| CR\n    CM -.-&gt;|reconciles| Z1\n    CM -.-&gt;|reconciles| Z2\n    CM -.-&gt;|reconciles| R1\n    CM -.-&gt;|reconciles| R2\n\n    CM &lt;--&gt;|API calls| PDNS\n    DNS --&gt;|queries| PDNS\n\n    style PO fill:#e1f5fe\n    style PDNS fill:#fff3e0\n    style DNS fill:#f3e5f5</code></pre>"},{"location":"guides/getting-started-advanced/#step-1-powerdns-server-setup","title":"Step 1: PowerDNS Server Setup","text":""},{"location":"guides/getting-started-advanced/#configure-powerdns-api","title":"Configure PowerDNS API","text":"<p>Edit your PowerDNS configuration (<code>/etc/powerdns/pdns.conf</code>):</p> <pre><code># Basic API Configuration\napi=yes\napi-key=your-super-secure-api-key-here\nwebserver=yes\nwebserver-address=0.0.0.0\nwebserver-port=8081\nwebserver-allow-from=0.0.0.0/0\nexperimental-json-interface=yes\n\n# Production Security Settings\n# webserver-address=10.0.0.0/8,192.168.0.0/16\n# webserver-allow-from=10.0.0.0/8,192.168.0.0/16\n</code></pre>"},{"location":"guides/getting-started-advanced/#test-powerdns-api","title":"Test PowerDNS API","text":"<pre><code># Test API connectivity\ncurl -H \"X-API-Key: your-super-secure-api-key-here\" \\\n     http://your-powerdns-server:8081/api/v1/servers/localhost\n\n# Expected response:\n# {\n#   \"type\": \"Server\",\n#   \"id\": \"localhost\",\n#   \"daemon_type\": \"authoritative\",\n#   \"version\": \"4.8.0\",\n#   ...\n# }\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-2-install-powerdns-operator","title":"Step 2: Install PowerDNS Operator","text":""},{"location":"guides/getting-started-advanced/#method-1-direct-installation","title":"Method 1: Direct Installation","text":"<pre><code># Create namespace\nkubectl create namespace powerdns-operator-system\n\n# Install operator\nkubectl apply -f https://raw.githubusercontent.com/powerdns-operator/powerdns-operator/main/dist/install.yaml\n</code></pre>"},{"location":"guides/getting-started-advanced/#method-2-helm-installation","title":"Method 2: Helm Installation","text":"<pre><code># Add Helm repository\nhelm repo add powerdns-operator https://powerdns-operator.github.io/powerdns-operator\nhelm repo update\n\n# Install with custom values\nhelm install powerdns-operator powerdns-operator/powerdns-operator \\\n  --namespace powerdns-operator-system \\\n  --create-namespace \\\n  --set config.pdnsApiUrl=\"https://your-powerdns-server:8081\" \\\n  --set config.pdnsApiKey=\"your-super-secure-api-key-here\" \\\n  --set config.pdnsApiVhost=\"localhost\"\n</code></pre>"},{"location":"guides/getting-started-advanced/#method-3-gitops-with-argocd","title":"Method 3: GitOps with ArgoCD","text":"<pre><code># argocd-application.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: powerdns-operator\n  namespace: argocd\nspec:\n  project: infrastructure\n  source:\n    repoURL: https://github.com/powerdns-operator/powerdns-operator\n    path: chart\n    targetRevision: main\n    helm:\n      values: |\n        config:\n          pdnsApiUrl: \"https://your-powerdns-server:8081\"\n          pdnsApiVhost: \"localhost\"\n        replicaCount: 2\n        monitoring:\n          enabled: true\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: powerdns-operator-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-3-configure-operator","title":"Step 3: Configure Operator","text":""},{"location":"guides/getting-started-advanced/#create-powerdns-connection-secret","title":"Create PowerDNS Connection Secret","text":"<pre><code>kubectl create secret generic powerdns-operator-manager \\\n  --from-literal=PDNS_API_URL=\"https://your-powerdns-server:8081\" \\\n  --from-literal=PDNS_API_KEY=\"your-super-secure-api-key-here\" \\\n  --from-literal=PDNS_API_VHOST=\"localhost\" \\\n  -n powerdns-operator-system\n</code></pre>"},{"location":"guides/getting-started-advanced/#verify-installation","title":"Verify Installation","text":"<pre><code># Check operator pods\nkubectl get pods -n powerdns-operator-system\n\n# Check operator logs\nkubectl logs -n powerdns-operator-system deployment/powerdns-operator-controller-manager\n\n# Expected logs should show:\n# INFO  Connected to PowerDNS server  version=4.8.0\n# INFO  PowerDNS daemon type  type=authoritative\n# INFO  PowerDNS connectivity test successful\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-4-understanding-resource-types","title":"Step 4: Understanding Resource Types","text":""},{"location":"guides/getting-started-advanced/#resource-hierarchy","title":"Resource Hierarchy","text":"<pre><code>graph TD\n    subgraph \"Cluster Scope\"\n        CZ[ClusterZone&lt;br/&gt;company.com]\n        CR[ClusterRRset&lt;br/&gt;www.company.com]\n    end\n\n    subgraph \"Namespace: production\"\n        Z1[Zone&lt;br/&gt;app.company.com]\n        R1[RRset&lt;br/&gt;api.app.company.com]\n    end\n\n    subgraph \"Namespace: staging\"  \n        Z2[Zone&lt;br/&gt;staging.company.com]\n        R2[RRset&lt;br/&gt;api.staging.company.com]\n    end\n\n    subgraph \"PowerDNS Server\"\n        PZ1[company.com]\n        PZ2[app.company.com]\n        PZ3[staging.company.com]\n        PR1[www.company.com A 1.2.3.4]\n        PR2[api.app.company.com A 10.0.1.10]\n        PR3[api.staging.company.com A 10.0.2.10]\n    end\n\n    CZ -.-&gt; PZ1\n    Z1 -.-&gt; PZ2\n    Z2 -.-&gt; PZ3\n    CR -.-&gt; PR1\n    R1 -.-&gt; PR2\n    R2 -.-&gt; PR3\n\n    style CZ fill:#ffecb3\n    style CR fill:#ffecb3\n    style Z1 fill:#c8e6c9\n    style Z2 fill:#c8e6c9\n    style R1 fill:#c8e6c9\n    style R2 fill:#c8e6c9</code></pre>"},{"location":"guides/getting-started-advanced/#when-to-use-each-resource-type","title":"When to Use Each Resource Type","text":"Resource Type Scope Use Case Managed By <code>ClusterZone</code> Cluster-wide Corporate domains, shared zones Platform Team <code>ClusterRRset</code> Cluster-wide Global services, infrastructure Platform Team <code>Zone</code> Namespace Application-specific domains Development Teams <code>RRset</code> Namespace Service endpoints, app records Development Teams"},{"location":"guides/getting-started-advanced/#step-5-basic-usage-examples","title":"Step 5: Basic Usage Examples","text":""},{"location":"guides/getting-started-advanced/#example-1-create-a-corporate-zone-platform-team","title":"Example 1: Create a Corporate Zone (Platform Team)","text":"<pre><code># corporate-zone.yaml\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: company.com\n  labels:\n    team: platform\n    criticality: high\n  annotations:\n    description: \"Main corporate domain\"\nspec:\n  kind: Native\n  nameservers:\n    - ns1.company.com\n    - ns2.company.com\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: www-company-com\n  labels:\n    service: website\nspec:\n  type: A\n  ttl: 300\n  records:\n    - 203.0.113.10\n    - 203.0.113.11\n  zoneRef:\n    name: company.com\n    kind: ClusterZone\n  comment: \"Corporate website\"\n</code></pre> <pre><code>kubectl apply -f corporate-zone.yaml\n</code></pre>"},{"location":"guides/getting-started-advanced/#example-2-application-team-creates-service-dns","title":"Example 2: Application Team Creates Service DNS","text":"<pre><code># app-dns.yaml\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: myapp.company.com\n  namespace: production\n  labels:\n    team: backend\n    environment: production\nspec:\n  kind: Native\n  nameservers:\n    - ns1.company.com\n    - ns2.company.com\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: api-myapp\n  namespace: production\nspec:\n  type: A\n  ttl: 60\n  records:\n    - 10.0.1.100\n    - 10.0.1.101\n  zoneRef:\n    name: myapp.company.com\n    kind: Zone\n  comment: \"API service endpoints\"\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: db-myapp\n  namespace: production\nspec:\n  type: A\n  ttl: 300\n  records:\n    - 10.0.1.200\n  zoneRef:\n    name: myapp.company.com\n    kind: Zone\n  comment: \"Database endpoint\"\n</code></pre> <pre><code>kubectl apply -f app-dns.yaml -n production\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-6-advanced-configurations","title":"Step 6: Advanced Configurations","text":""},{"location":"guides/getting-started-advanced/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code># Create environment-specific namespaces\nkubectl create namespace production\nkubectl create namespace staging\nkubectl create namespace development\n</code></pre>"},{"location":"guides/getting-started-advanced/#production-environment","title":"Production Environment","text":"<pre><code># production-dns.yaml\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: prod.company.com\n  namespace: production\n  labels:\n    environment: production\n    criticality: high\nspec:\n  kind: Native\n  nameservers:\n    - ns1.company.com\n    - ns2.company.com\n  soa_edit_api: EPOCH\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: app-prod\n  namespace: production\nspec:\n  type: A\n  ttl: 300\n  records:\n    - 10.100.1.10\n    - 10.100.1.11\n    - 10.100.1.12\n  zoneRef:\n    name: prod.company.com\n    kind: Zone\n  comment: \"Production application servers\"\n</code></pre>"},{"location":"guides/getting-started-advanced/#staging-environment","title":"Staging Environment","text":"<pre><code># staging-dns.yaml\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: staging.company.com\n  namespace: staging\n  labels:\n    environment: staging\nspec:\n  kind: Native\n  nameservers:\n    - ns1.company.com\n    - ns2.company.com\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: app-staging\n  namespace: staging\nspec:\n  type: A\n  ttl: 60  # Shorter TTL for staging\n  records:\n    - 10.200.1.10\n  zoneRef:\n    name: staging.company.com\n    kind: Zone\n  comment: \"Staging application server\"\n</code></pre>"},{"location":"guides/getting-started-advanced/#blue-green-deployment-pattern","title":"Blue-Green Deployment Pattern","text":"<pre><code># blue-green-dns.yaml\n# Blue deployment (active)\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: app-blue\n  namespace: production\n  labels:\n    deployment: blue\n    status: active\nspec:\n  type: A\n  ttl: 60\n  records:\n    - 10.0.10.10\n    - 10.0.10.11\n  zoneRef:\n    name: prod.company.com\n    kind: Zone\n  comment: \"Blue deployment (active)\"\n---\n# Green deployment (standby)\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: app-green\n  namespace: production\n  labels:\n    deployment: green\n    status: standby\nspec:\n  type: A\n  ttl: 60\n  records:\n    - 10.0.11.10\n    - 10.0.11.11\n  zoneRef:\n    name: prod.company.com\n    kind: Zone\n  comment: \"Green deployment (standby)\"\n---\n# Active traffic endpoint\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: app-active\n  namespace: production\n  labels:\n    traffic: active\n    deployment-strategy: blue-green\nspec:\n  type: CNAME\n  ttl: 30  # Very short TTL for quick switching\n  records:\n    - app-blue.prod.company.com\n  zoneRef:\n    name: prod.company.com\n    kind: Zone\n  comment: \"Active traffic (currently blue)\"\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-7-monitoring-and-observability","title":"Step 7: Monitoring and Observability","text":""},{"location":"guides/getting-started-advanced/#check-resource-status","title":"Check Resource Status","text":"<pre><code># View all DNS resources\nkubectl get clusterzones,zones,clusterrrsets,rrsets --all-namespaces -o wide\n\n# Detailed resource information\nkubectl describe zone myapp.company.com -n production\n\n# Check resource events\nkubectl get events --field-selector involvedObject.name=myapp.company.com -n production\n</code></pre>"},{"location":"guides/getting-started-advanced/#monitor-operator-health","title":"Monitor Operator Health","text":"<pre><code># Check operator metrics\nkubectl port-forward -n powerdns-operator-system \\\n  service/powerdns-operator-controller-manager-metrics-service 8080:8443\n\ncurl -k https://localhost:8080/metrics | grep powerdns\n</code></pre>"},{"location":"guides/getting-started-advanced/#prometheus-monitoring-setup","title":"Prometheus Monitoring Setup","text":"<pre><code># prometheus-monitoring.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: powerdns-operator\n  namespace: powerdns-operator-system\nspec:\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n  endpoints:\n  - port: https\n    path: /metrics\n    scheme: https\n---\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: powerdns-operator-alerts\n  namespace: powerdns-operator-system\nspec:\n  groups:\n  - name: powerdns-operator\n    rules:\n    - alert: PowerDNSOperatorDown\n      expr: up{job=\"powerdns-operator-controller-manager\"} == 0\n      for: 5m\n      labels:\n        severity: critical\n      annotations:\n        summary: \"PowerDNS Operator is down\"\n    - alert: DNSReconciliationFailed\n      expr: increase(controller_runtime_reconcile_errors_total[5m]) &gt; 0\n      for: 2m\n      labels:\n        severity: warning\n      annotations:\n        summary: \"DNS reconciliation failures detected\"\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-8-security-best-practices","title":"Step 8: Security Best Practices","text":""},{"location":"guides/getting-started-advanced/#rbac-configuration","title":"RBAC Configuration","text":"<pre><code># rbac-example.yaml\n# Platform team - full cluster access\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: dns-platform-admin\nrules:\n- apiGroups: [\"dns.cav.enablers.ob\"]\n  resources: [\"clusterzones\", \"clusterrrsets\"]\n  verbs: [\"*\"]\n- apiGroups: [\"dns.cav.enablers.ob\"]\n  resources: [\"zones\", \"rrsets\"]\n  verbs: [\"get\", \"list\", \"watch\"]\n---\n# Application team - namespace-only access\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: production\n  name: dns-app-admin\nrules:\n- apiGroups: [\"dns.cav.enablers.ob\"]\n  resources: [\"zones\", \"rrsets\"]\n  verbs: [\"*\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: app-team-dns-access\n  namespace: production\nsubjects:\n- kind: User\n  name: app-team-lead\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: dns-app-admin\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"guides/getting-started-advanced/#network-security","title":"Network Security","text":"<pre><code># network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: powerdns-operator-netpol\n  namespace: powerdns-operator-system\nspec:\n  podSelector:\n    matchLabels:\n      control-plane: controller-manager\n  policyTypes:\n  - Egress\n  egress:\n  # Allow DNS resolution\n  - ports:\n    - protocol: UDP\n      port: 53\n  # Allow PowerDNS API access\n  - to:\n    - namespaceSelector: {}\n    ports:\n    - protocol: TCP\n      port: 8081\n  # Allow Kubernetes API access\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 443\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-9-troubleshooting-common-issues","title":"Step 9: Troubleshooting Common Issues","text":""},{"location":"guides/getting-started-advanced/#issue-1-operator-wont-start","title":"Issue 1: Operator Won't Start","text":"<pre><code># Check pod status\nkubectl get pods -n powerdns-operator-system\n\n# Check logs for errors\nkubectl logs -n powerdns-operator-system deployment/powerdns-operator-controller-manager\n\n# Common error: Connection refused\n# Solution: Verify PowerDNS API is accessible\ncurl -H \"X-API-Key: your-api-key\" http://powerdns-server:8081/api/v1/servers/localhost\n</code></pre>"},{"location":"guides/getting-started-advanced/#issue-2-resources-stuck-in-pending","title":"Issue 2: Resources Stuck in Pending","text":"<pre><code># Check resource status\nkubectl describe zone example.com -n production\n\n# Check operator logs\nkubectl logs -n powerdns-operator-system deployment/powerdns-operator-controller-manager -f\n\n# Force reconciliation\nkubectl annotate zone example.com powerdns-operator/reconcile=\"$(date +%s)\" -n production\n</code></pre>"},{"location":"guides/getting-started-advanced/#issue-3-dns-records-not-updating","title":"Issue 3: DNS Records Not Updating","text":"<pre><code># Verify PowerDNS server state\ncurl -H \"X-API-Key: your-api-key\" \\\n     http://powerdns-server:8081/api/v1/servers/localhost/zones/example.com\n\n# Compare with Kubernetes resource\nkubectl get rrset example-record -o yaml -n production\n\n# Check for conflicts\nkubectl get events --field-selector involvedObject.name=example-record -n production\n</code></pre>"},{"location":"guides/getting-started-advanced/#step-10-gitops-integration","title":"Step 10: GitOps Integration","text":""},{"location":"guides/getting-started-advanced/#directory-structure","title":"Directory Structure","text":"<pre><code>dns-config/\n\u251c\u2500\u2500 base/\n\u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u251c\u2500\u2500 cluster-zones.yaml\n\u2502   \u2514\u2500\u2500 rbac.yaml\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 production/\n\u2502   \u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u2502   \u251c\u2500\u2500 zones.yaml\n\u2502   \u2502   \u2514\u2500\u2500 rrsets.yaml\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u251c\u2500\u2500 kustomization.yaml\n\u2502   \u2502   \u251c\u2500\u2500 zones.yaml\n\u2502   \u2502   \u2514\u2500\u2500 rrsets.yaml\n\u2502   \u2514\u2500\u2500 development/\n\u2502       \u251c\u2500\u2500 kustomization.yaml\n\u2502       \u251c\u2500\u2500 zones.yaml\n\u2502       \u2514\u2500\u2500 rrsets.yaml\n</code></pre>"},{"location":"guides/getting-started-advanced/#base-configuration","title":"Base Configuration","text":"<pre><code># base/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nresources:\n  - cluster-zones.yaml\n  - rbac.yaml\n\ncommonLabels:\n  managed-by: gitops\n  component: dns\n</code></pre>"},{"location":"guides/getting-started-advanced/#environment-overlay","title":"Environment Overlay","text":"<pre><code># environments/production/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nresources:\n  - ../../base\n  - zones.yaml\n  - rrsets.yaml\n\nnamespace: production\n\ncommonLabels:\n  environment: production\n\npatchesStrategicMerge:\n  - zone-production-patch.yaml\n</code></pre>"},{"location":"guides/getting-started-advanced/#next-steps","title":"Next Steps","text":"<ol> <li>Explore Advanced Features</li> <li>Security Guide - Comprehensive security practices</li> <li> <p>Troubleshooting - Detailed problem resolution</p> </li> <li> <p>Production Deployment</p> </li> <li>Set up monitoring and alerting</li> <li>Implement backup and disaster recovery</li> <li> <p>Configure multi-region deployments</p> </li> <li> <p>Automation</p> </li> <li>Integrate with CI/CD pipelines</li> <li>Set up automated testing</li> <li> <p>Implement policy enforcement</p> </li> <li> <p>Scaling</p> </li> <li>Optimize for large-scale deployments</li> <li>Implement resource quotas</li> <li>Set up multi-cluster management</li> </ol>"},{"location":"guides/getting-started-advanced/#useful-commands-reference","title":"Useful Commands Reference","text":"<pre><code># Resource Management\nkubectl get clusterzones,zones,clusterrrsets,rrsets --all-namespaces\nkubectl describe zone &lt;zone-name&gt; -n &lt;namespace&gt;\nkubectl logs -n powerdns-operator-system deployment/powerdns-operator-controller-manager -f\n\n# Debugging\nkubectl annotate zone &lt;zone-name&gt; powerdns-operator/reconcile=\"$(date +%s)\" -n &lt;namespace&gt;\nkubectl get events --field-selector involvedObject.name=&lt;resource-name&gt; -n &lt;namespace&gt;\n\n# PowerDNS API Testing  \ncurl -H \"X-API-Key: &lt;api-key&gt;\" http://&lt;powerdns-server&gt;:8081/api/v1/servers/localhost\ncurl -H \"X-API-Key: &lt;api-key&gt;\" http://&lt;powerdns-server&gt;:8081/api/v1/servers/localhost/zones\n\n# Monitoring\nkubectl port-forward -n powerdns-operator-system service/powerdns-operator-controller-manager-metrics-service 8080:8443\ncurl -k https://localhost:8080/metrics | grep powerdns\n</code></pre> <p>This comprehensive guide should get you started with PowerDNS Operator in any environment, from development to production!</p>"},{"location":"guides/metrics/","title":"Metrics","text":"<p>PowerDNS-Operator exposes metrics in Prometheus format.  </p> Name Type Description Available labels clusterzones_status gauge Statuses of ClusterZones processed name, status zones_status gauge Statuses of Zones processed name, namespace ,status clusterrrsets_status gauge Statuses of ClusterRRsets processed fqdn, name, status, type rrsets_status gauge Statuses of RRsets processed fqdn, name, namespace, status, type"},{"location":"guides/metrics/#example","title":"Example","text":"<p>The following metrics are based on the example defined here</p> <pre><code>clusterzones_status{name=\"example.org\",status=\"Succeeded\"} 1\nclusterrrsets_status{fqdn=\"example.org.\",name=\"mx.example.org\",status=\"Succeeded\",type=\"MX\"} 1\nclusterrrsets_status{fqdn=\"example.org.\",name=\"soa.example.org\",status=\"Succeeded\",type=\"SOA\"} 1\nclusterrrsets_status{fqdn=\"ns1.example.org.\",name=\"ns1.example.org\",status=\"Succeeded\",type=\"A\"} 1\nclusterrrsets_status{fqdn=\"ns2.example.org.\",name=\"ns2.example.org\",status=\"Succeeded\",type=\"A\"} 1\n\nzones_status{name=\"myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\"} 1\nrrsets_status{fqdn=\"myapp1.example.org.\",name=\"soa.myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\",type=\"SOA\"} 1\nrrsets_status{fqdn=\"front.myapp1.example.org.\",name=\"front.myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\",type=\"A\"} 1\n</code></pre>"},{"location":"guides/rrsets/","title":"RRset deployment","text":""},{"location":"guides/rrsets/#specification","title":"Specification","text":"<p>The specification of the <code>RRset</code> contains the following fields:</p> Field Type Required Description type string Y Type of the record (e.g. \"A\", \"PTR\", \"MX\") name string Y Name of the record ttl uint32 Y DNS TTL of the records, in seconds records []string Y All records in this Resource Record Set comment string N Comment on RRSet zoneRef ZoneRef Y ZoneRef reference the zone the RRSet depends on <p>The specification of the <code>ZoneRef</code> contains the following fields:</p> Field Type Required Description name string Y Name of the <code>ClusterZone</code>/<code>Zone</code> kind string Y Kind of zone (Zone/ClusterZone)"},{"location":"guides/rrsets/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: test.helloworld.com\n  namespace: default\nspec:\n  comment: nothing to tell\n  type: A\n  name: test\n  ttl: 300\n  records:\n    - 1.1.1.1\n    - 2.2.2.2\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre> <p>Note: The name can be canonical or not. If not, the name of the <code>ClusterZone</code>/<code>Zone</code> will be appended</p>"},{"location":"guides/warnings/","title":"Warnings on field format","text":""},{"location":"guides/warnings/#deal-with-canonical-names","title":"Deal with canonical names","text":"<p>For some resources such as CNAME, PTR, MX, SRV, the records field MUST be in canonical format (end with a dot \".\"). See following examples.</p>"},{"location":"guides/warnings/#cname","title":"CNAME","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: test4.helloworld.com\nspec:\n  type: CNAME\n  name: test4\n  ttl: 300\n  records:\n    - test1.helloworld.com.\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#ptr","title":"PTR","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: 1.1.168.192.in-addr.arpa.helloworld.com\nspec:\n  type: PTR\n  name: \"1\"\n  ttl: 300\n  records:\n    - mailserver.helloworld.com.\n  zoneRef:\n    name: 1.168.192.in-addr.arpa\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#mx","title":"MX","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: mx.helloworld.com\nspec:\n  type: MX\n  name: \"helloworld.com.\"\n  ttl: 300\n  records:\n    - \"10 mailserver1.helloworld.com.\"\n    - \"20 mailserver2.helloworld.com.\"\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#srv","title":"SRV","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: database.srv.helloworld.com\nspec:\n  type: SRV\n  name: \"_database._tcp.myapp\"\n  ttl: 300\n  records:\n    - 1 50 25565 test2.helloworld.com.\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#txt-records","title":"TXT Records","text":"<p>Sometime, you may encounter the following error when applying a <code>RRset</code> custom resource: <pre><code>status:\n  syncErrorDescription: 'Record helloworld.com./TXT ''Welcome to the helloworld.com\n    domain'': Parsing record content (try ''pdnsutil check-zone''): Data field in\n    DNS should start with quote (\") at position 0 of ''Welcome to the helloworld.com\n    domain'''\n  syncStatus: Failed\n</code></pre></p> <p>This error is due to a wrong format for the <code>RRset</code>. TXT records MUST start AND end with an escaped quote (\\\"). See following example.  </p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: txt.helloworld.com\nspec:\n  type: TXT\n  name: \"helloworld.com.\"\n  ttl: 300\n  records:\n    - \"\\\"Welcome to the helloworld.com domain\\\"\"\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/zones/","title":"Zone deployment","text":""},{"location":"guides/zones/#specification","title":"Specification","text":"<p>The specification of the <code>Zone</code> contains the following fields:</p> Field Type Required Description kind string Y Kind of the zone, one of \"Native\", \"Master\", \"Slave\", \"Producer\", \"Consumer\" nameservers []string Y List of the nameservers of the zone catalog string N The catalog this zone is a member of soa_edit_api string N The SOA-EDIT-API metadata item, one of \"DEFAULT\", \"INCREASE\", \"EPOCH\", defaults to \"DEFAULT\""},{"location":"guides/zones/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: helloworld.com\n  namespace: default\nspec:\n  nameservers:\n    - ns1.helloworld.com\n    - ns2.helloworld.com\n  kind: Master\n  catalog: catalog.helloworld\n  soa_edit_api: EPOCH\n</code></pre>"},{"location":"introduction/faq/","title":"FAQ","text":""},{"location":"introduction/faq/#can-i-use-powerdns-admin-and-powerdns-operator-together","title":"Can I use PowerDNS-Admin and PowerDNS Operator together?","text":"<p>No, the operator only supports the official PowerDNS API. The PowerDNS-Admin project implements its own specific API on top of PowerDNS's API. There is no issue if you want to use both projects together, but the operator can only rely on the official API. You may notice issues if you try to use PowerDNS-Admin to manage the same resources as the operator.</p>"},{"location":"introduction/faq/#can-i-manage-multiple-powerdns-servers-with-a-single-operator","title":"Can I manage multiple PowerDNS servers with a single operator?","text":"<p>No, the operator is designed to manage a single PowerDNS server. If you need to manage multiple PowerDNS servers, you will have to deploy multiple instances of the operator in multiple Kubernetes clusters, each one managing a different PowerDNS server.</p> <p>This may be technically possible in the future, but it is not a priority for the project.</p>"},{"location":"introduction/faq/#can-i-set-an-interval-to-check-for-drifts-between-the-powerdns-server-and-the-kubernetes-resources","title":"Can I set an interval to check for drifts between the PowerDNS server and the Kubernetes resources?","text":"<p>The operator will not loop on each resource to check if it is in sync with the PowerDNS server. It will only react to events (create, update, delete) on the resources. If you update the resources, the operator will update the PowerDNS server accordingly. If you delete the resources, the operator will delete the resources from PowerDNS.</p> <p>This should be relatively easy to implement in the future if needed, allowing the user to choose a loop interval to remediate potential drifts.</p>"},{"location":"introduction/getting-started/","title":"Getting Started","text":"<p>PowerDNS Operator runs within your Kubernetes cluster as a deployment resource. It utilizes CustomResourceDefinitions (CRDs) to manage PowerDNS resources. The Operator communicates with the PowerDNS API to manage zones and records.</p>"},{"location":"introduction/getting-started/#pre-requisites","title":"Pre-requisites","text":"<p>Before you can install PowerDNS Operator, you need to have the following:</p> <ul> <li>A Kubernetes cluster v1.29.0 or later</li> <li>A PowerDNS server v4.7 or later</li> </ul> <p>Note: The PowerDNS API must be enabled and accessible from the Kubernetes cluster where the operator is running.</p>"},{"location":"introduction/getting-started/#installing-with-kustomize","title":"Installing with Kustomize","text":"<p>Create the namespace and create a Secret containing the needed PowerDNS variables but you can also create the Secret using External Secrets or any other secret management tool.</p> <p>Theses secrets are used to configure the PowerDNS Operator to connect to the PowerDNS API.</p> <pre><code>kubectl create namespace powerdns-operator-system\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: powerdns-operator-manager\n  namespace: powerdns-operator-system\ntype: Opaque\nstringData:\n  PDNS_API_URL: https://powerdns.example.local:8081\n  PDNS_API_KEY: secret\n  PDNS_API_VHOST: localhost\nEOF\n</code></pre> <p>Install the latest version using the following command:</p> <pre><code>kubectl apply -f https://github.com/powerdns-operator/PowerDNS-Operator/releases/latest/download/bundle.yaml\n</code></pre> <p>Or you can specify a specific version (e.g. <code>v0.1.0</code>):</p> <pre><code>kubectl apply -f https://github.com/powerdns-operator/PowerDNS-Operator/releases/download/v0.1.0/bundle.yaml\n</code></pre>"},{"location":"introduction/getting-started/#installing-with-helm","title":"Installing with Helm","text":"<p>A Helm chart is available on a specific project.</p>"},{"location":"introduction/overview/","title":"API Overview","text":""},{"location":"introduction/overview/#architecture","title":"Architecture","text":"<p>The PowerDNS-Operator extends Kubernetes with Custom Resources, which define Zones and Records. The controller fetches ClusterZones, Zones, ClusterRRsets and RRsets from the cluster and creates PowerDNS elements (Zones and Records). Each modification on these Custom Resources will be applied on PowerDNS instance accordingly.</p>"},{"location":"introduction/overview/#resource-model","title":"Resource Model","text":"<p>To understand the mechanics of the operator let's start with an example.</p> <ol> <li>The <code>ClusterZone</code> resource, created by Platform Team, references a root Zone (example.org). <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: example.org\nspec:\n  nameservers:\n    - ns1.example.org\n    - ns2.example.org\n  kind: Native\n</code></pre></li> <li>Some <code>ClusterRRsets</code> resources, created by Platofrm Team, can reference records related to the <code>ClusterZone</code> (such nameservers IPs, mail servers, SOA, ...). <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: soa.example.org\nspec:\n  name: example.org.\n  records:\n  - ns1.example.org. admin.example.org. 1 10800 3600 604800 3600\n  ttl: 3600\n  type: SOA\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: mx.example.org\nspec:\n  type: MX\n  name: \"example.org.\"\n  ttl: 300\n  records:\n    - \"10 mx1.example.org.\"\n    - \"20 mx2.example.org.\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: ns1.example.org\nspec:\n  type: A\n  name: ns1\n  ttl: 300\n  records:\n    - \"10.25.32.1\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: ns2.example.org\nspec:\n  type: A\n  name: ns2\n  ttl: 300\n  records:\n    - \"10.25.32.2\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n</code></pre></li> <li>The <code>Zone</code>, in the 'myapp1' namespace, can be created by Application Team or Platform Team depending on the Authorization model choosen, reference a Sub-Zone for Application purposes. <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: myapp1.example.org\n  namespace: myapp1\nspec:\n  nameservers:\n    - ns1.example.org\n    - ns2.example.org\n  kind: Native\n</code></pre></li> <li>The <code>RRsets</code> in the 'myapp1' namespace, created by Application Team, reference services provided by the Application (frontend, backend, database, ...). <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: soa.myapp1.example.org\n  namespace: myapp1\nspec:\n  name: myapp1.example.org.\n  records:\n  - ns1.example.org. admin.example.org. 1 10800 3600 604800 3600\n  ttl: 3600\n  type: SOA\n  zoneRef:\n    name: myapp1.example.org\n    kind: Zone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: front.myapp1.example.org\n  namespace: myapp1\nspec:\n  type: A\n  name: front\n  ttl: 300\n  records:\n    - \"1.2.3.4\"\n  zoneRef:\n    name: myapp1.example.org\n    kind: Zone\n</code></pre></li> </ol> <p>Such a structure allows a separation of elements, the application team can only administer the <code>RRsets</code> linked to its services</p> <p>Each <code>RRset</code> refers to the ClusterZone/Zone it depends on.</p>"},{"location":"introduction/overview/#behavior","title":"Behavior","text":"<p>The PowerDNS-Operator (PDNS-OP for brevity) reconciles <code>ClusterZones</code> or <code>Zones</code> in the following manner:</p> <ol> <li>PDNS-OP verifies that no other <code>Zone</code> or <code>ClusterZone</code> already exists with the same FQDN (Fully Qualified Domain Name), if exists, <code>Zone</code>/<code>ClusterZone</code> status is defined as 'Failed'</li> <li>PDNS-OP requests PowerDNS API to create/modify the corresponding resource</li> <li>PDNS-OP requests PowerDNS API to create/modify related 'Nameservers' entries</li> <li>PDNS-OP updates resource Status (including Serial) and its metrics</li> </ol> <p>The PowerDNS-Operator reconciles <code>ClusterRRsets</code> or <code>RRsets</code> in the following manner:</p> <ol> <li>PDNS-OP verifies that the corresponding <code>ClusterZone</code>/<code>Zone</code> already exists, if not, It schedule a new reconciliation later on</li> <li>PDNS-OP verifies that the corresponding <code>ClusterZone</code>/<code>Zone</code> is not in 'Failed' status, in that case , <code>RRset</code> or <code>ClusterRRset</code> status is defined as 'Failed'</li> <li>PDNS-OP requests PowerDNS API to create/modify the corresponding resource</li> <li>PDNS-OP updates resource Status and its metrics</li> <li>PDNS-OP schedule a reconciliation to update <code>ClusterZone</code>/<code>Zone</code> Status (including Serial)</li> </ol>"},{"location":"introduction/overview/#roles-and-responsibilities","title":"Roles and responsibilities","text":"<p>The PowerDNS-Operator is designed to target the following persona:</p> <ul> <li>Cluster Operator: The cluster operator is responsible for configuring PowerDNS instance, ,</li> <li>Platform Team: The Platform team is responsible for defining the architecture <code>ClusterZone</code>, <code>Zone</code>, <code>ClusterRRset</code> and <code>RRset</code>, setting the permissions for application team (e.g. permissions to create Zones in their namespaces),</li> <li>Application Team: The Application developer is responsible for defining <code>RRset</code> (eventually <code>Zone</code>) related to their services.</li> </ul> <p>Each persona will roughly map to a Kubernetes RBAC role. Depending on your environment these roles can map to a single user. Note: The PowerDNS Operator does not manage the PowerDNS instance lifecycle.</p>"},{"location":"introduction/stability-support/","title":"Stability and Support","text":""},{"location":"introduction/stability-support/#breaking-changes-introduced-in-v04x-versions","title":"Breaking changes introduced in v0.4.x versions","text":"<p>We noticed lacks of security and delegation possibilities with &lt;=v0.3.x versions, so we decided to split previous <code>Zone</code> in 2 differents Custom Resources: </p> <ul> <li><code>ClusterZone</code> (cluster-wide resource)</li> <li><code>Zone</code> (namespaced resource)</li> </ul> <p>This decision introduces breaking changes</p> <ul> <li><code>Zone</code> was previously cluster-wide resource become namespace-scoped</li> <li><code>rrset.spec.zoneRef.kind</code> is a new mandatory field to indicate whereas the <code>RRset</code> depends on a <code>Zone</code> or a <code>ClusterZone</code></li> <li><code>rrset.status.syncErrorDescription</code> is replaced by a <code>Status.Condition</code> field as adviced by the community<sup>1</sup><sup>2</sup></li> </ul> <ol> <li> <p>https://heidloff.net/article/storing-state-status-kubernetes-resources-conditions-operators-go/\u00a0\u21a9</p> </li> <li> <p>https://maelvls.dev/kubernetes-conditions/\u00a0\u21a9</p> </li> </ol>"},{"location":"testing_environment/k3d/","title":"Kubernetes cluster with k3d (https://k3d.io/stable/)","text":"<p>Other solutions such as Talos, minikube, kind, ... can be used</p>"},{"location":"testing_environment/k3d/#private-registry","title":"Private registry","text":"<p>To create a private local registry: <pre><code>k3d registry create registry.localhost --port 5000\n</code></pre></p>"},{"location":"testing_environment/k3d/#kubernetes-cluster","title":"Kubernetes Cluster","text":"<p>The following configuration file is used to deploy a 3-node cluster for testing purposes with the below features:</p> <ul> <li>Traefik ingress controller on http port 18081</li> <li>CSI default Storage on the Host directory <code>/mnt/k3d</code> (Usefaul to persist mariadb data)</li> <li>Private registry access configured</li> </ul> <p><pre><code>cat &gt; ~/.k3d/k3d-cluster.yaml &lt;&lt;EOF\napiVersion: k3d.io/v1alpha5\nkind: Simple\nmetadata:\n  name: k3d\nservers: 1\nagents: 2\nvolumes:\n  - volume: \"/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt\"\n  - volume: /mnt/k3d:/var/lib/rancher/k3s/storage\n    nodeFilters:\n      - server:0\n      - agent:*\nports:\n  - port: 18081:80\n    nodeFilters:\n      - loadbalancer\nregistries:\n  use:\n    - k3d-registry.localhost:5000\nEOF\n</code></pre> <pre><code>k3d cluster create --config ~/.k3d/k3d-cluster.yaml\n</code></pre></p>"},{"location":"testing_environment/powerdns/","title":"PowerDNS cluster deployment","text":"<p>For a full clustered powerdns instance, See Here</p>"}]}